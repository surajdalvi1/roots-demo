var _ = require('lodash'),
	contentstack = require('contentstack'),
	path = require('path'),
	RootsUtil = require('roots-util');

var errors = {
	missing_keys: 'Please make sure you supply all the required fields! Missing `api_key` or `access_token` of the Stack!',
	missing_ct_id: 'One or more of your content types is missing its `uid` value',
	sys_conflict: 'One of your content types has `sys` as a field. This is reserved for storing Contentstack system metadata, please rename this field to a different value.'
};

var env = {
	development: 'api.contentstack.com',
	production: 'cdn.contentstack.com'
};

module.exports = (opts) => {
  // check for required config
  if (!opts.api_key && opts.access_token && opts.environment)
    throw new Error errors.missing_keys

  // setup contentstack SDK
  var Stack = Contentstack.Stack({
    environment: env[process.env.CONTENTSTACK_ENV] || env.development,
    access_token: opts.access_token,
    api_key: opts.api_key
	});

  return RootsContentstack = (function() {
	  function RootsContentstack(roots) {
      var base, base1;
      this.roots = roots;
      this.util = new RootsUtil(this.roots);
      // Not sure what this is!
      if ((base = this.roots.config).locals == null) {
        base.locals = {};
      }
      // Not sure what this is!
      if ((base1 = this.roots.config.locals).contentstack == null) {
        base1.contentful = {};
      }
    }

    RootsContentstack.prototype.setup = function() {
      return validate(opts.content_types)["with"](this);
    };

   	validate = function(ctypes) {
      if (_.isPlainObject(ctypes)) {
      	// Not sure if this is required | Should be possible without this?
        ctypes = modify_config(ctypes);
      } else {
      	// If its not an array
      }
      // This goes through each CT defined in the config file!
      return W.map(ctypes, function(ct) {
        if (!ct.id) {
          return W.reject(errors.missing_keys);
        }
        if (ct.filters == null) {
          ct.filters = {};
        }
        if (!ct.name || (ct.template && !ct.path)) {
          return W(Stack.ContentType(ct.id).Query()
          	.toJSON()
          	.find()
          	.spread(function success(result, count) {
          		console.log('result:', result);
          	}, function error(err) {
          		console.error(err);
          	})
          	.then(function(res) {
	            if (ct.template) {
	            	console.log("ct: template");
	            }
	            console.log('response', res);
	            return ct;
          }));
        }
        return W.resolve(t);
      });
   	};

    modify_config = function(ctypes) {
      return _.reduce(ctypes, function(res, type, k) {
        type.name = k;
        res.push(type);
        return res;
      }, []);
    };

    return RootsContentstack;
  })();
}